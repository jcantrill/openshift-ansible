---
# we will ensure our secrets and configmaps are set up here first
- name: Generate certificates
  command: "{{ openshift.common.admin_binary }} ca create-signer-cert --key={{mktemp.stdout}}/ca.key --cert={{mktemp.stdout}}/ca.crt --serial={{mktemp.stdout}}/ca.serial.txt --name=logging-signer-test"

- name: Copy base signing configuration file
  copy: src=signing.conf dest={{mktemp.stdout}}/signing.conf

- name: Generating signing configuration file
  lineinfile: "dest={{mktemp.stdout}}/signing.conf regexp='# Top dir$' line='dir                     = {{mktemp.stdout}}               # Top dir'"

- include: procure_server_certs.yaml
  vars:
    - procure_component: kibana

- include: procure_server_certs.yaml
  vars:
    - procure_component: kibana-ops

- include: procure_server_certs.yaml
  vars:
    - procure_component: kibana-internal
    - hostnames: "kibana, kibana-ops, {{kibana_hostname}}, {{kibana_ops_hostname}}"

- name: Copy proxy TLS configuration file
  copy: src=server-tls.json dest={{mktemp.stdout}}/server-tls.json
  when: server_tls_json is undefined

- name: Copy proxy TLS configuration failed_when
  copy: content="{{server_tls_json}}" dest={{mktemp.stdout}}/server-tls.json
  when: server_tls_json is defined

- copy: content="" dest={{mktemp.stdout}}/ca.db

- copy: content="" dest={{mktemp.stdout}}/ca.crt.srl

- name: Generate PEM certs
  include: generate_pems.yaml component={{node_name}}
  with_items:
    - system.logging.fluentd
    - system.logging.kibana
    - system.logging.curator
    - system.admin
  loop_control:
    loop_var: node_name

- shell: index=2; certs=""; for cert in $(echo logging-es{,-ops}); do certs=$certs,DNS.$index=$cert; index=$(($index+1)); done; echo $certs
  register: elasticsearch_certs

- shell: index=2; certs=""; for cert in $(echo logging-es{,-ops}{,-cluster}{,.logging.svc.cluster.local}); do certs=$certs,DNS.$index=$cert; index=$(($index+1)); done; echo $certs
  register: logging_es_certs

- name: Generate PKCS12 chains
  include: generate_pkcs12.yaml component='system.admin'

- name: Generate PKCS12 chains
  include: generate_pkcs12.yaml component={{node.name}} oid={{node.oid | default(False)}} chain_certs={{node.certs}}
  with_items:
   - {name: 'elasticsearch', oid: True, certs: '{{elasticsearch_certs.stdout}}'}
   - {name: 'logging-es', certs: '{{logging_es_certs.stdout}}'}
  loop_control:
    loop_var: node

- name: Generate proxy session
  shell: tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 200
  register: proxy_session

- name: Generate oauth client secret
  shell: tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 64
  register: oauth_secret
